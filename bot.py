# ugphone_bot.py
import os
import json
import asyncio
from datetime import datetime
import requests
from colorama import init, Fore
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import nest_asyncio
from keep_alive import keep_alive  # import keep_alive.py

# ================= CONFIG =================
init(autoreset=True)
nest_asyncio.apply()  # fix "event loop already running" tr√™n Replit

TELEGRAM_TOKEN = "7966232208:AAFQA4sdnz4BhGLfII7Nd8zuYrGzFvULbxM"  # Thay token bot c·ªßa b·∫°n
URL = "https://dashboard.kingdev.sbs/tool_ug.php?status"
MESSAGE_FILE = "stock_message.json"

# ================= HELPER =================
def load_stock_messages():
    """Load message_id cho t·ª´ng chat t·ª´ file JSON"""
    if os.path.exists(MESSAGE_FILE):
        try:
            data = json.load(open(MESSAGE_FILE))
            return {int(k): v for k, v in data.items()}
        except Exception as e:
            print(Fore.RED + f"‚ö† L·ªói load stock_messages: {e}")
    return {}

def save_stock_messages(messages):
    """L∆∞u message_id cho t·ª´ng chat v√†o file JSON"""
    with open(MESSAGE_FILE, "w") as f:
        json.dump(messages, f)

def get_stock_text():
    """L·∫•y d·ªØ li·ªáu stock t·ª´ server v√† tr·∫£ v·ªÅ text"""
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(URL, headers=headers, timeout=30)
        response.raise_for_status()
        try:
            data = response.json()
        except json.JSONDecodeError:
            return f"‚ùå L·ªói khi parse JSON!\nServer tr·∫£ v·ªÅ:\n{response.text[:200]}..."
    except requests.RequestException as e:
        return f"‚ùå L·ªói khi k·∫øt n·ªëi: {e}"

    servers = data.get("servers", {})
    status = data.get("status", "unknown")
    last_updated = data.get("last_updated", "unknown")

    text = f"üì° *UGPHONE STOCK STATUS*\nStatus: `{status}`\nMessage: Hi·∫øu ƒê·∫πp Zai\n\n"
    for server, stt in servers.items():
        icon = "üü¢" if stt != "Out of Stock" else "üî¥"
        text += f"{icon} *{server}*: {stt}\n"

    text += f"\n_L·∫ßn c·∫≠p nh·∫≠t cu·ªëi: {last_updated} ‚Ä¢ T·ª± ƒë·ªông l√†m m·ªõi m·ªói 5 ph√∫t_"
    return text

# ================= TELEGRAM BOT =================
stock_messages = load_stock_messages()

async def send_or_edit_stock(chat_id, bot):
    """G·ª≠i ho·∫∑c edit message stock cho 1 chat"""
    text = get_stock_text()
    message_id = stock_messages.get(chat_id)
    while True:  # Retry li√™n t·ª•c n·∫øu l·ªói
        try:
            if message_id:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                msg = await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN)
                stock_messages[chat_id] = msg.message_id
                save_stock_messages(stock_messages)
            print(Fore.CYAN + f"‚ôª Updated stock at {datetime.now().strftime('%H:%M:%S')} in chat {chat_id}")
            break  # th√†nh c√¥ng th√¨ tho√°t loop
        except Exception as e:
            print(Fore.RED + f"‚ùå L·ªói khi g·ª≠i/edit stock chat {chat_id}: {e}")
            print(Fore.YELLOW + "‚ôª Th·ª≠ l·∫°i sau 5 gi√¢y...")
            await asyncio.sleep(5)

# L·ªánh /refresh
async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await send_or_edit_stock(chat_id, context.bot)
    await update.message.reply_text("‚ôª Stock ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!", quote=True)

# Loop t·ª± ƒë·ªông c·∫≠p nh·∫≠t stock m·ªói 5 ph√∫t cho t·∫•t c·∫£ chat
async def auto_update(bot):
    while True:
        await asyncio.sleep(300)  # 5 ph√∫t
        for chat_id in list(stock_messages.keys()):
            try:
                await send_or_edit_stock(chat_id, bot)
            except Exception as e:
                print(Fore.RED + f"‚ùå L·ªói khi auto update chat {chat_id}: {e}")

# ================= MAIN =================
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("refresh", refresh))

    # B·∫Øt ƒë·∫ßu auto update
    asyncio.create_task(auto_update(app.bot))

    # Ch·∫°y bot
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.idle()

# ================= RUN =================
if __name__ == "__main__":
    keep_alive()  # gi·ªØ bot lu√¥n s·ªëng tr√™n Replit
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
